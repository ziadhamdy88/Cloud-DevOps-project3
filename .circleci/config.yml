version: 2.1

commands:
  install-node:
    description: Installs NPM and Nodejs
    steps:
      - run:
          name: Install npm and node js
          command: |
            curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
            sudo apt install -y nodejs
            #sudo npm install --global n
            #sudo n 13.8.0
  
  install-awscli:
    description: Installs awscli
    steps:
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install-ansible:
    description: Installs Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
      
  destroy-environment:
    description: Destroys back-end and front-end cloudformation stacks given workflow id
    parameters:
      WorkflowID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-<<parameters.WorkflowID>>
            aws s3 rm s3://udapeople-<<parameters.WorkflowID>> --recursive
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-<<parameters.WorkflowID>>
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      WorkflowID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/XeGTRRXGiP8WWn3BH6kdjm/migration_<<parameters.WorkflowID>>)
            if(($SUCCESS == 1));
            then
              cd ~/project/backend
              npm install --legacy-peer-deps
              npm run migrations:revert
            fi

            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  
  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            #npm install typescript@latest -D
            #npm install @types/babel__traverse@7.0.6
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
          # audit fix twice
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-awscli
      #- run:
      #    name: Install tar and gzip
      #    command: yum install -y tar gzip
      - run:
          name: Ensure backend infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Ensure frontend infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Fetch EC2 instance IP and append to ansible inventory
          command: |
            #aws ec2 describe-instances \
            #--query 'Reservations[*].Instances[*].PublicIpAddress' \
            #--filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            #--output text >> .circleci/ansible/inventory.txt
            
            BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - run:
          name: Testing inventory
          command: cat .circleci/ansible/inventory.txt
      - destroy-environment
    
  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-awscli
      - install-ansible
      - add_ssh_keys:
          fingerprints: ["2e:44:cb:ab:f0:cb:58:1a:8c:a4:6a:f0:8d:a1:6c:9d"]
      - attach_workspace:
          at: ~/
      - run:
          name: Testing inventory file
          command: cat .circleci/ansible/inventory.txt
      - run:
          name: Run ansible playbook and configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install-awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run build
            npm run migrations > migrations_dump.txt
      - run:
          name: Test migrations_dump content
          command: cat backend/migrations_dump.txt
      - run:
          name: Send migration results to kvdb bucket
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "Migrations dumped successfully"
              curl --insecure https://kvdb.io/XeGTRRXGiP8WWn3BH6kdjm/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            else
              echo "Unsuccessful"
            fi
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-awscli
      - install-node
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm i
            sudo apt -y update
            sudo apt install python3
            
      - run:
          name: Get backend URL
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "Testing"
            echo ${API_URL}
            echo "Testing"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            #npm update
            npm run build

            #npm install typescript@latest -D
            #npm install @types/babel__traverse@7.0.6

            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
      
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-awscli
      - install-node
      - install-ansible
      - add_ssh_keys:
          fingerprints: ["2e:44:cb:ab:f0:cb:58:1a:8c:a4:6a:f0:8d:a1:6c:9d"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      #cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      #tar -czvf artifact.tar.gz dist/* package*
      - run:
          name: Zip directory to artifact
          command: |
            cd backend
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cp -v artifact.tar.gz .circleci/ansible/roles/deploy/files/
      - run:
          name: Testing folder content
          command: |
            for file in ~/project/*; do
              echo "${file##*/}"
            done
      #      echo "Files in backend"
      #      for file in backend/*; do
      #        echo "${file##*/}"
      #      done
      - run:
          name: Testing inventory
          command: cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations
  
  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-awscli
      - install-node
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              exit 1
            else
              exit 1
            fi
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-awscli
      - install-node
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID1\`].Value" \
            --no-paginate --output text)
            
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            curl https://kvdb.io/XeGTRRXGiP8WWn3BH6kdjm/old_workflow_id -d "${OldWorkflowID}"

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack1 \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-awscli
      - install-node
      - run:
          name: Get old stack workflow id and update
          command: |
            OldWorkflowID=$(curl https://kvdb.io/XeGTRRXGiP8WWn3BH6kdjm/old_workflow_id)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"

            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"          
            
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "Deletion initiated"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "Stacks are clean!"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-backend:
          requires: [build-backend]
      - test-frontend:
          requires: [build-frontend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]